PLUGINS
=======


Placheolders
=============
Please document every single placeholder your plugin uses with the 
following format, so "list_placeholders" can do what it is supposed 
to do:

#{name}:			[description]
#{name [arg]}:			[description]

This should be placed in the header of your plugin. Don't care about 
tabs. list_placeholders fixes everything.



Requirements
============
Format:
#Requires: [program name]

The function "check_reqs" is using this information. Your plugin should 
check for its requirements. If they are not met, use log_error (and 
exit). You can replace the affected placeholder with the same error 
message so the user can know faster about this issue.

User interaction
****************

Command line interface
======================
Called usually by the user:
kibip [plugin name] [plugin function] [args...]

You can use the $root variable of kibip inside your plugin.

While no CGI support is available, this is the best method to 
interact with users. 

stat(1)
====
This is possible, but shouldn't be used imho. You can compare
access times of files so you know if a link was clicked.

_______________________________________________________________________

Replacing
=========
This can be done with the core function "replace":

replace cmd [placeholder] [cmd]	
replace content [placeholder] [content]		

Handling placeholder parameters:
If you replace with a command, you can access the arguments with
something like this:

replace cmd "{os_uname \([^}]\+\)}" "uname \1"

Backreference as usually. \([^}]\+\)} avoids problems which could occur 
with the greedy matching behavior of sed.



 



